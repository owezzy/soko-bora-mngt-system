// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: customerspb/api.proto

package customerspbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	customerspb "github.com/owezzy/soko-bora-mngt-system/customers/customerspb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CustomersServiceName is the fully-qualified name of the CustomersService service.
	CustomersServiceName = "customerspb.CustomersService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CustomersServiceRegisterCustomerProcedure is the fully-qualified name of the CustomersService's
	// RegisterCustomer RPC.
	CustomersServiceRegisterCustomerProcedure = "/customerspb.CustomersService/RegisterCustomer"
	// CustomersServiceEnableCustomerProcedure is the fully-qualified name of the CustomersService's
	// EnableCustomer RPC.
	CustomersServiceEnableCustomerProcedure = "/customerspb.CustomersService/EnableCustomer"
	// CustomersServiceDisableCustomerProcedure is the fully-qualified name of the CustomersService's
	// DisableCustomer RPC.
	CustomersServiceDisableCustomerProcedure = "/customerspb.CustomersService/DisableCustomer"
	// CustomersServiceChangeSmsNumberProcedure is the fully-qualified name of the CustomersService's
	// ChangeSmsNumber RPC.
	CustomersServiceChangeSmsNumberProcedure = "/customerspb.CustomersService/ChangeSmsNumber"
	// CustomersServiceAuthorizeCustomerProcedure is the fully-qualified name of the CustomersService's
	// AuthorizeCustomer RPC.
	CustomersServiceAuthorizeCustomerProcedure = "/customerspb.CustomersService/AuthorizeCustomer"
	// CustomersServiceGetCustomerProcedure is the fully-qualified name of the CustomersService's
	// GetCustomer RPC.
	CustomersServiceGetCustomerProcedure = "/customerspb.CustomersService/GetCustomer"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	customersServiceServiceDescriptor                 = customerspb.File_customerspb_api_proto.Services().ByName("CustomersService")
	customersServiceRegisterCustomerMethodDescriptor  = customersServiceServiceDescriptor.Methods().ByName("RegisterCustomer")
	customersServiceEnableCustomerMethodDescriptor    = customersServiceServiceDescriptor.Methods().ByName("EnableCustomer")
	customersServiceDisableCustomerMethodDescriptor   = customersServiceServiceDescriptor.Methods().ByName("DisableCustomer")
	customersServiceChangeSmsNumberMethodDescriptor   = customersServiceServiceDescriptor.Methods().ByName("ChangeSmsNumber")
	customersServiceAuthorizeCustomerMethodDescriptor = customersServiceServiceDescriptor.Methods().ByName("AuthorizeCustomer")
	customersServiceGetCustomerMethodDescriptor       = customersServiceServiceDescriptor.Methods().ByName("GetCustomer")
)

// CustomersServiceClient is a client for the customerspb.CustomersService service.
type CustomersServiceClient interface {
	RegisterCustomer(context.Context, *connect.Request[customerspb.RegisterCustomerRequest]) (*connect.Response[customerspb.RegisterCustomerResponse], error)
	EnableCustomer(context.Context, *connect.Request[customerspb.EnableCustomerRequest]) (*connect.Response[customerspb.EnableCustomerResponse], error)
	DisableCustomer(context.Context, *connect.Request[customerspb.DisableCustomerRequest]) (*connect.Response[customerspb.DisableCustomerResponse], error)
	ChangeSmsNumber(context.Context, *connect.Request[customerspb.ChangeSmsNumberRequest]) (*connect.Response[customerspb.ChangeSmsNumberResponse], error)
	AuthorizeCustomer(context.Context, *connect.Request[customerspb.AuthorizeCustomerRequest]) (*connect.Response[customerspb.AuthorizeCustomerResponse], error)
	GetCustomer(context.Context, *connect.Request[customerspb.GetCustomerRequest]) (*connect.Response[customerspb.GetCustomerResponse], error)
}

// NewCustomersServiceClient constructs a client for the customerspb.CustomersService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCustomersServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CustomersServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &customersServiceClient{
		registerCustomer: connect.NewClient[customerspb.RegisterCustomerRequest, customerspb.RegisterCustomerResponse](
			httpClient,
			baseURL+CustomersServiceRegisterCustomerProcedure,
			connect.WithSchema(customersServiceRegisterCustomerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		enableCustomer: connect.NewClient[customerspb.EnableCustomerRequest, customerspb.EnableCustomerResponse](
			httpClient,
			baseURL+CustomersServiceEnableCustomerProcedure,
			connect.WithSchema(customersServiceEnableCustomerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		disableCustomer: connect.NewClient[customerspb.DisableCustomerRequest, customerspb.DisableCustomerResponse](
			httpClient,
			baseURL+CustomersServiceDisableCustomerProcedure,
			connect.WithSchema(customersServiceDisableCustomerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		changeSmsNumber: connect.NewClient[customerspb.ChangeSmsNumberRequest, customerspb.ChangeSmsNumberResponse](
			httpClient,
			baseURL+CustomersServiceChangeSmsNumberProcedure,
			connect.WithSchema(customersServiceChangeSmsNumberMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		authorizeCustomer: connect.NewClient[customerspb.AuthorizeCustomerRequest, customerspb.AuthorizeCustomerResponse](
			httpClient,
			baseURL+CustomersServiceAuthorizeCustomerProcedure,
			connect.WithSchema(customersServiceAuthorizeCustomerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getCustomer: connect.NewClient[customerspb.GetCustomerRequest, customerspb.GetCustomerResponse](
			httpClient,
			baseURL+CustomersServiceGetCustomerProcedure,
			connect.WithSchema(customersServiceGetCustomerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// customersServiceClient implements CustomersServiceClient.
type customersServiceClient struct {
	registerCustomer  *connect.Client[customerspb.RegisterCustomerRequest, customerspb.RegisterCustomerResponse]
	enableCustomer    *connect.Client[customerspb.EnableCustomerRequest, customerspb.EnableCustomerResponse]
	disableCustomer   *connect.Client[customerspb.DisableCustomerRequest, customerspb.DisableCustomerResponse]
	changeSmsNumber   *connect.Client[customerspb.ChangeSmsNumberRequest, customerspb.ChangeSmsNumberResponse]
	authorizeCustomer *connect.Client[customerspb.AuthorizeCustomerRequest, customerspb.AuthorizeCustomerResponse]
	getCustomer       *connect.Client[customerspb.GetCustomerRequest, customerspb.GetCustomerResponse]
}

// RegisterCustomer calls customerspb.CustomersService.RegisterCustomer.
func (c *customersServiceClient) RegisterCustomer(ctx context.Context, req *connect.Request[customerspb.RegisterCustomerRequest]) (*connect.Response[customerspb.RegisterCustomerResponse], error) {
	return c.registerCustomer.CallUnary(ctx, req)
}

// EnableCustomer calls customerspb.CustomersService.EnableCustomer.
func (c *customersServiceClient) EnableCustomer(ctx context.Context, req *connect.Request[customerspb.EnableCustomerRequest]) (*connect.Response[customerspb.EnableCustomerResponse], error) {
	return c.enableCustomer.CallUnary(ctx, req)
}

// DisableCustomer calls customerspb.CustomersService.DisableCustomer.
func (c *customersServiceClient) DisableCustomer(ctx context.Context, req *connect.Request[customerspb.DisableCustomerRequest]) (*connect.Response[customerspb.DisableCustomerResponse], error) {
	return c.disableCustomer.CallUnary(ctx, req)
}

// ChangeSmsNumber calls customerspb.CustomersService.ChangeSmsNumber.
func (c *customersServiceClient) ChangeSmsNumber(ctx context.Context, req *connect.Request[customerspb.ChangeSmsNumberRequest]) (*connect.Response[customerspb.ChangeSmsNumberResponse], error) {
	return c.changeSmsNumber.CallUnary(ctx, req)
}

// AuthorizeCustomer calls customerspb.CustomersService.AuthorizeCustomer.
func (c *customersServiceClient) AuthorizeCustomer(ctx context.Context, req *connect.Request[customerspb.AuthorizeCustomerRequest]) (*connect.Response[customerspb.AuthorizeCustomerResponse], error) {
	return c.authorizeCustomer.CallUnary(ctx, req)
}

// GetCustomer calls customerspb.CustomersService.GetCustomer.
func (c *customersServiceClient) GetCustomer(ctx context.Context, req *connect.Request[customerspb.GetCustomerRequest]) (*connect.Response[customerspb.GetCustomerResponse], error) {
	return c.getCustomer.CallUnary(ctx, req)
}

// CustomersServiceHandler is an implementation of the customerspb.CustomersService service.
type CustomersServiceHandler interface {
	RegisterCustomer(context.Context, *connect.Request[customerspb.RegisterCustomerRequest]) (*connect.Response[customerspb.RegisterCustomerResponse], error)
	EnableCustomer(context.Context, *connect.Request[customerspb.EnableCustomerRequest]) (*connect.Response[customerspb.EnableCustomerResponse], error)
	DisableCustomer(context.Context, *connect.Request[customerspb.DisableCustomerRequest]) (*connect.Response[customerspb.DisableCustomerResponse], error)
	ChangeSmsNumber(context.Context, *connect.Request[customerspb.ChangeSmsNumberRequest]) (*connect.Response[customerspb.ChangeSmsNumberResponse], error)
	AuthorizeCustomer(context.Context, *connect.Request[customerspb.AuthorizeCustomerRequest]) (*connect.Response[customerspb.AuthorizeCustomerResponse], error)
	GetCustomer(context.Context, *connect.Request[customerspb.GetCustomerRequest]) (*connect.Response[customerspb.GetCustomerResponse], error)
}

// NewCustomersServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCustomersServiceHandler(svc CustomersServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	customersServiceRegisterCustomerHandler := connect.NewUnaryHandler(
		CustomersServiceRegisterCustomerProcedure,
		svc.RegisterCustomer,
		connect.WithSchema(customersServiceRegisterCustomerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	customersServiceEnableCustomerHandler := connect.NewUnaryHandler(
		CustomersServiceEnableCustomerProcedure,
		svc.EnableCustomer,
		connect.WithSchema(customersServiceEnableCustomerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	customersServiceDisableCustomerHandler := connect.NewUnaryHandler(
		CustomersServiceDisableCustomerProcedure,
		svc.DisableCustomer,
		connect.WithSchema(customersServiceDisableCustomerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	customersServiceChangeSmsNumberHandler := connect.NewUnaryHandler(
		CustomersServiceChangeSmsNumberProcedure,
		svc.ChangeSmsNumber,
		connect.WithSchema(customersServiceChangeSmsNumberMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	customersServiceAuthorizeCustomerHandler := connect.NewUnaryHandler(
		CustomersServiceAuthorizeCustomerProcedure,
		svc.AuthorizeCustomer,
		connect.WithSchema(customersServiceAuthorizeCustomerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	customersServiceGetCustomerHandler := connect.NewUnaryHandler(
		CustomersServiceGetCustomerProcedure,
		svc.GetCustomer,
		connect.WithSchema(customersServiceGetCustomerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/customerspb.CustomersService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CustomersServiceRegisterCustomerProcedure:
			customersServiceRegisterCustomerHandler.ServeHTTP(w, r)
		case CustomersServiceEnableCustomerProcedure:
			customersServiceEnableCustomerHandler.ServeHTTP(w, r)
		case CustomersServiceDisableCustomerProcedure:
			customersServiceDisableCustomerHandler.ServeHTTP(w, r)
		case CustomersServiceChangeSmsNumberProcedure:
			customersServiceChangeSmsNumberHandler.ServeHTTP(w, r)
		case CustomersServiceAuthorizeCustomerProcedure:
			customersServiceAuthorizeCustomerHandler.ServeHTTP(w, r)
		case CustomersServiceGetCustomerProcedure:
			customersServiceGetCustomerHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCustomersServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCustomersServiceHandler struct{}

func (UnimplementedCustomersServiceHandler) RegisterCustomer(context.Context, *connect.Request[customerspb.RegisterCustomerRequest]) (*connect.Response[customerspb.RegisterCustomerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("customerspb.CustomersService.RegisterCustomer is not implemented"))
}

func (UnimplementedCustomersServiceHandler) EnableCustomer(context.Context, *connect.Request[customerspb.EnableCustomerRequest]) (*connect.Response[customerspb.EnableCustomerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("customerspb.CustomersService.EnableCustomer is not implemented"))
}

func (UnimplementedCustomersServiceHandler) DisableCustomer(context.Context, *connect.Request[customerspb.DisableCustomerRequest]) (*connect.Response[customerspb.DisableCustomerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("customerspb.CustomersService.DisableCustomer is not implemented"))
}

func (UnimplementedCustomersServiceHandler) ChangeSmsNumber(context.Context, *connect.Request[customerspb.ChangeSmsNumberRequest]) (*connect.Response[customerspb.ChangeSmsNumberResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("customerspb.CustomersService.ChangeSmsNumber is not implemented"))
}

func (UnimplementedCustomersServiceHandler) AuthorizeCustomer(context.Context, *connect.Request[customerspb.AuthorizeCustomerRequest]) (*connect.Response[customerspb.AuthorizeCustomerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("customerspb.CustomersService.AuthorizeCustomer is not implemented"))
}

func (UnimplementedCustomersServiceHandler) GetCustomer(context.Context, *connect.Request[customerspb.GetCustomerRequest]) (*connect.Response[customerspb.GetCustomerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("customerspb.CustomersService.GetCustomer is not implemented"))
}
